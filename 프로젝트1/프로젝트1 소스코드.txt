#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

vector<int> gateway;

struct Node{
    vector<int> edge;
    int parent;
    int gate;
    int gateCnt;
    Node() : gate(0), parent(-1), gateCnt(0){}
    void SortEdge(){
        sort(edge.begin(), edge.end());
    }
};

void NumOfGate(vector<Node> &arr){
    for(int i = 0; i < arr.size(); i++){
        int cnt = 0;
        if(arr[i].gate == 0){
            for(int j = 0; j < arr[i].edge.size(); j++){
                if(arr[arr[i].edge[j]].gate == 1)
                    cnt++;
            }
            arr[i].gateCnt = cnt;
        }
    }
}

vector<int> BFS(vector<Node> &arr, int st, int dst){
    int flag = 0;
    vector<int> ret;
    vector<int> visit(arr.size(), 0);
    int depth = -1;
    queue<int> a;
    a.push(st);
    while(!a.empty()){
        depth++;
        int qSize = a.size();
        for(int i = 0; i < qSize; i++){
            int temp = a.front();
            a.pop();
            visit[temp] = 1;
            for(int i = 0; i < arr[temp].edge.size(); i++){
                if(arr[temp].edge[i] == dst){
                    ret.push_back(temp);
                    ret.push_back(arr[temp].edge[i]);
                    flag = 1;
                    break;
                }
                if(visit[arr[temp].edge[i]] == 0){
                    visit[arr[temp].edge[i]] = 1;
                    a.push(arr[temp].edge[i]);
                }
            }
            if(flag == 1)
                break;
        }
        if(flag == 1)
            break;
    }
    if(flag == 1) {
        ret.push_back(depth);
        return ret;
    } else{
        return ret;
    }
}

void SortDistance(vector<Node> arr, vector<vector<int>> &distance){
    for(int a = distance.size() - 1; a > 0; a--){
        for(int b = 0; b < a; b++){
            if(arr[distance[b][0]].gateCnt < arr[distance[b + 1][0]].gateCnt){
                vector<int> tp = distance[b];
                distance[b] = distance[b + 1];
                distance[b + 1] = tp;
            }
        }
    }
    int twoGate = 0;
    for(int i = 0; i < distance.size(); i++){
        if(arr[distance[i][0]].gateCnt == 2){
            twoGate++;
        }
    }
    for(int a = distance.size() - 1 - twoGate; a > 0; a--){
        for(int b = 0; b < a; b++){
            if(distance[b][2] > distance[b+1][2]){
                vector<int> tp = distance[b];
                distance[b] = distance[b + 1];
                distance[b + 1] = tp;
            }
        }
    }
    for(int a = distance.size() - 1; a > twoGate; a--){
        for(int b = twoGate; b < a; b++){
            if(distance[b][2] > distance[b+1][2]){
                vector<int> tp = distance[b];
                distance[b] = distance[b + 1];
                distance[b + 1] = tp;
            }
        }
    }
}

vector<int> FindEdge(vector<Node> &arr, int start){
    vector<vector<int>> distance;
    int flag = -1;
    for(int i = 0; i < gateway.size(); i++){
        vector<int> tp = BFS(arr, start, gateway[i]);
        if(tp.size() == 3) {
            distance.push_back(tp);
        }
    }
    SortDistance(arr, distance);
    for(int i = 0; i < distance.size(); i++){
        if(distance[i][2] < 1){
            flag = i;
        }
    }
    if(flag != -1){
        vector<int> result;
        result.push_back(distance[flag][0]);
        result.push_back(distance[flag][1]);
        for(int i = 0; i < arr[distance[flag][0]].edge.size(); i++){
            if(arr[distance[flag][0]].edge[i] == distance[flag][1]) {
                arr[distance[flag][0]].edge.erase(arr[distance[flag][0]].edge.begin() + i);
            }
        }
        for(int i = 0; i < arr[distance[flag][1]].edge.size(); i++){
            if(arr[distance[flag][1]].edge[i] == distance[flag][0]) {
                arr[distance[flag][1]].edge.erase(arr[distance[flag][1]].edge.begin() + i);
            }
        }
        return result;
    }
    else{
        vector<int> result;
        result.push_back(distance[0][0]);
        result.push_back(distance[0][1]);
        for(int i = 0; i < arr[distance[0][0]].edge.size(); i++){
            if(arr[distance[0][0]].edge[i] == distance[0][1]) {
                arr[distance[0][0]].edge.erase(arr[distance[0][0]].edge.begin() + i);
            }
        }
        for(int i = 0; i < arr[distance[0][1]].edge.size(); i++){
            if(arr[distance[0][1]].edge[i] == distance[0][0]) {
                arr[distance[0][1]].edge.erase(arr[distance[0][1]].edge.begin() + i);
            }
        }
        return result;
    }
}

int main()
{
    int N; // the total number of nodes in the level, including the gateways
    int L; // the number of links
    int E; // the number of exit gateways
    cin >> N >> L >> E; cin.ignore();
    vector<Node> arr(N);
    for (int i = 0; i < L; i++) {
        int N1; // N1 and N2 defines a link between these nodes
        int N2;
        cin >> N1 >> N2; cin.ignore();
        arr[N1].edge.push_back(N2);
        arr[N2].edge.push_back(N1);
    }
    for (int i = 0; i < E; i++) {
        int EI; // the index of a gateway node
        cin >> EI; cin.ignore();
        arr[EI].gate = 1;
        gateway.push_back(EI);
    }
    for (int i = 0; i < N; i++) {
        arr[i].SortEdge();
    }
    NumOfGate(arr);
    // game loop
    while (1) {
        int SI; // The index of the node on which the Skynet agent is positioned this turn
        cin >> SI; cin.ignore();
        vector<int> result = FindEdge(arr, SI);
        // Write an action using cout. DON'T FORGET THE "<< endl"
        // To debug: cerr << "Debug messages..." << endl;
        // Example: 0 1 are the indices of the nodes you wish to sever the link between
        printf("%d %d\n", result[0], result[1]);
        NumOfGate(arr);
    }
}